'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Events = exports.onceCallback = exports.remove = exports.once = exports.get = exports.clear = exports.add = undefined;

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _queue = require('./queue');

var queue = _interopRequireWildcard(_queue);

var _socket = require('./socket');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var debug = (0, _debug2.default)('queued-socket.io:events');

var Events = new Set();

var add = function add(event, callback) {
  var priority = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;

  var client = (0, _socket.getClient)();

  if (client && client.connected) {
    debug('add - ' + event);

    client.on(event, callback);
    return Events.add(event);
  }

  debug('add - queue - ' + event);

  return queue.add('add', { event: event, callback: callback }, priority);
};

var onceCallback = function onceCallback(event, data, callback) {
  Events.delete(event);
  return callback(data);
};

var once = function once(event, callback) {
  var priority = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;

  var client = (0, _socket.getClient)();

  if (client && client.connected) {
    debug('once - ' + event);

    Events.add(event);

    return client.once(event, function (data) {
      return onceCallback(event, data, callback);
    });
  }
  debug('once - queue - ' + event);

  return queue.add('once', { event: event, callback: callback }, priority);
};

var clear = function clear() {
  var priority = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;

  var client = (0, _socket.getClient)();

  if (client && client.connected) {
    debug('clear');
    Events.forEach(function (event) {
      return client.off(event);
    });
    return Events.clear();
  }
  debug('clear - queue');

  return queue.add('clear', undefined, priority);
};

var get = function get() {
  return [].concat(_toConsumableArray(Events));
};

var remove = function remove(event) {
  var priority = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;

  var client = (0, _socket.getClient)();

  if (client && client.connected) {
    debug('remove - ' + event);
    client.off(event);
    return Events.delete(event);
  }
  debug('remove - queue - ' + event);

  return queue.add('remove', { event: event }, priority);
};

exports.add = add;
exports.clear = clear;
exports.get = get;
exports.once = once;
exports.remove = remove;
exports.onceCallback = onceCallback;
exports.Events = Events;