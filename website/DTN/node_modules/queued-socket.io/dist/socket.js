'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.runQueueResult = exports.once = exports.onReconnect = exports.onDisconnect = exports.onConnect = exports.on = exports.off = exports.isConnected = exports.getClient = exports.events = exports.emit = exports.disconnect = exports.connect = undefined;

var _socket = require('socket.io-client');

var _socket2 = _interopRequireDefault(_socket);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _events = require('./events');

var events = _interopRequireWildcard(_events);

var _queue = require('./queue');

var queue = _interopRequireWildcard(_queue);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var debug = (0, _debug2.default)('queued-socket.io:socket');

var client = void 0;

var getClient = function getClient() {
  return client;
};

var isConnected = function isConnected() {
  return Boolean(client && client.connected);
};

var emit = function emit(event, data) {
  var priority = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;

  if (client && client.connected) {
    debug('emit - ' + event);
    return client.emit(event, data);
  }

  debug('emit - queue - ' + event);
  return queue.add('emit', { event: event, data: data }, priority);
};

var on = function on(event, callback) {
  var priority = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;
  return events.add(event, callback, priority);
};

var off = function off(event) {
  var priority = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;
  return events.remove(event, priority);
};

var once = function once(event, callback) {
  var priority = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;
  return events.once(event, callback, priority);
};

var runQueueResult = function runQueueResult() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      key = _ref.key,
      _ref$payload = _ref.payload,
      payload = _ref$payload === undefined ? {} : _ref$payload;

  switch (key) {
    case 'add':
      return events.add(payload.event, payload.callback);
    case 'once':
      return events.once(payload.event, payload.callback);
    case 'remove':
      return events.remove(payload.event);
    case 'clear':
      return events.clear();
    case 'emit':
      return emit(payload.event, payload.data);
    default:
      return false;
  }
};

var onConnect = function onConnect() {
  debug('socket - connected - ' + client.id);
  return queue.runQueue(runQueueResult);
};

var onReconnect = function onReconnect() {
  debug('socket - reconnect - ' + client.id);
  return queue.runQueue(runQueueResult);
};

var onDisconnect = function onDisconnect(reason) {
  debug('socket - disconnected - ' + client.id + ' - ' + reason);
  events.clear();
  return queue.flush();
};

var connect = function connect(uri) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (!uri) {
    throw new Error('Please specify connection uri for socket');
  }

  if (client && client.connected) {
    return client;
  }

  client = _socket2.default.connect(uri, options);

  client.on('connect', onConnect);
  client.on('reconnect', onReconnect);
  client.on('disconnect', onDisconnect);

  return client;
};

var disconnect = function disconnect() {
  if (client && client.disconnect) {
    client.disconnect();
  }

  client = undefined;
};

exports.connect = connect;
exports.disconnect = disconnect;
exports.emit = emit;
exports.events = events;
exports.getClient = getClient;
exports.isConnected = isConnected;
exports.off = off;
exports.on = on;
exports.onConnect = onConnect;
exports.onDisconnect = onDisconnect;
exports.onReconnect = onReconnect;
exports.once = once;
exports.runQueueResult = runQueueResult;